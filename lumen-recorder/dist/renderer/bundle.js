/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./src/renderer/app.ts":
/*!*****************************!*\
  !*** ./src/renderer/app.ts ***!
  \*****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("{__webpack_require__.r(__webpack_exports__);\nclass LumenRecorder {\n    constructor() {\n        this.currentState = 'idle';\n        this.mediaRecorder = null;\n        this.audioContext = null;\n        this.analyser = null;\n        this.dataArray = null;\n        this.animationId = null;\n        this.recordingStartTime = 0;\n        this.timerInterval = null;\n        this.recordedChunks = [];\n        this.stream = null;\n        this.settings = {\n            audioSource: 'default',\n            videoSource: 'screen',\n            quality: 'high',\n            autoSave: true,\n            saveLocation: '',\n            autoSummary: true,\n            summaryLanguage: 'en'\n        };\n        // DOM Elements\n        this.elements = {};\n        this.initializeElements();\n        this.setupEventListeners();\n        this.loadSettings();\n        this.populateMediaDevices();\n        this.setupKeyboardShortcuts();\n    }\n    initializeElements() {\n        const elementIds = [\n            'minimize-btn', 'maximize-btn', 'close-btn',\n            'new-recording-btn', 'open-file-btn', 'recent-recordings',\n            'status-indicator', 'status-text', 'recording-timer',\n            'record-btn', 'pause-btn', 'stop-btn',\n            'audio-source', 'video-source', 'quality',\n            'audio-canvas', 'recording-interface', 'processing-interface',\n            'summary-interface', 'progress-fill', 'key-points', 'transcript',\n            'export-btn', 'share-btn', 'settings-modal', 'settings-close',\n            'auto-save', 'save-location', 'auto-summary', 'summary-language'\n        ];\n        elementIds.forEach(id => {\n            this.elements[id] = document.getElementById(id);\n        });\n    }\n    setupEventListeners() {\n        // Window controls\n        this.elements['minimize-btn']?.addEventListener('click', () => {\n            window.electronAPI.minimizeWindow();\n        });\n        this.elements['maximize-btn']?.addEventListener('click', () => {\n            window.electronAPI.maximizeWindow();\n        });\n        this.elements['close-btn']?.addEventListener('click', () => {\n            window.electronAPI.closeWindow();\n        });\n        // Recording controls\n        this.elements['record-btn']?.addEventListener('click', () => {\n            this.startRecording();\n        });\n        this.elements['pause-btn']?.addEventListener('click', () => {\n            this.togglePause();\n        });\n        this.elements['stop-btn']?.addEventListener('click', () => {\n            this.stopRecording();\n        });\n        // Sidebar buttons\n        this.elements['new-recording-btn']?.addEventListener('click', () => {\n            this.newRecording();\n        });\n        this.elements['open-file-btn']?.addEventListener('click', () => {\n            this.openFile();\n        });\n        // Settings\n        this.elements['audio-source']?.addEventListener('change', (e) => {\n            this.settings.audioSource = e.target.value;\n            this.saveSettings();\n        });\n        this.elements['video-source']?.addEventListener('change', (e) => {\n            this.settings.videoSource = e.target.value;\n            this.saveSettings();\n        });\n        this.elements['quality']?.addEventListener('change', (e) => {\n            this.settings.quality = e.target.value;\n            this.saveSettings();\n        });\n        // Settings modal\n        this.elements['settings-close']?.addEventListener('click', () => {\n            this.closeSettings();\n        });\n        this.elements['auto-save']?.addEventListener('change', (e) => {\n            this.settings.autoSave = e.target.checked;\n            this.saveSettings();\n        });\n        this.elements['auto-summary']?.addEventListener('change', (e) => {\n            this.settings.autoSummary = e.target.checked;\n            this.saveSettings();\n        });\n        this.elements['summary-language']?.addEventListener('change', (e) => {\n            this.settings.summaryLanguage = e.target.value;\n            this.saveSettings();\n        });\n        // Summary actions\n        this.elements['export-btn']?.addEventListener('click', () => {\n            this.exportSummary();\n        });\n        this.elements['share-btn']?.addEventListener('click', () => {\n            this.shareSummary();\n        });\n        // Menu event listeners\n        window.electronAPI.onMenuNewRecording(() => {\n            this.newRecording();\n        });\n        window.electronAPI.onMenuOpenFile(() => {\n            this.openFile();\n        });\n        window.electronAPI.onMenuSettings(() => {\n            this.openSettings();\n        });\n        window.electronAPI.onMenuStartRecording(() => {\n            this.startRecording();\n        });\n        window.electronAPI.onMenuStopRecording(() => {\n            this.stopRecording();\n        });\n        window.electronAPI.onMenuToggleRecording(() => {\n            this.toggleRecording();\n        });\n    }\n    setupKeyboardShortcuts() {\n        document.addEventListener('keydown', (e) => {\n            if (e.ctrlKey || e.metaKey) {\n                switch (e.key) {\n                    case 'r':\n                        e.preventDefault();\n                        this.toggleRecording();\n                        break;\n                    case 'p':\n                        e.preventDefault();\n                        this.togglePause();\n                        break;\n                    case 's':\n                        e.preventDefault();\n                        this.stopRecording();\n                        break;\n                    case 'n':\n                        e.preventDefault();\n                        this.newRecording();\n                        break;\n                    case 'o':\n                        e.preventDefault();\n                        this.openFile();\n                        break;\n                    case ',':\n                        e.preventDefault();\n                        this.openSettings();\n                        break;\n                }\n            }\n        });\n    }\n    async loadSettings() {\n        try {\n            const savedSettings = await window.electronAPI.getSetting('recordingSettings');\n            if (savedSettings) {\n                this.settings = { ...this.settings, ...savedSettings };\n                this.updateSettingsUI();\n            }\n        }\n        catch (error) {\n            console.error('Failed to load settings:', error);\n        }\n    }\n    async saveSettings() {\n        try {\n            await window.electronAPI.setSetting('recordingSettings', this.settings);\n        }\n        catch (error) {\n            console.error('Failed to save settings:', error);\n        }\n    }\n    updateSettingsUI() {\n        const audioSource = this.elements['audio-source'];\n        const videoSource = this.elements['video-source'];\n        const quality = this.elements['quality'];\n        const autoSave = this.elements['auto-save'];\n        const autoSummary = this.elements['auto-summary'];\n        const summaryLanguage = this.elements['summary-language'];\n        const saveLocation = this.elements['save-location'];\n        if (audioSource)\n            audioSource.value = this.settings.audioSource;\n        if (videoSource)\n            videoSource.value = this.settings.videoSource;\n        if (quality)\n            quality.value = this.settings.quality;\n        if (autoSave)\n            autoSave.checked = this.settings.autoSave;\n        if (autoSummary)\n            autoSummary.checked = this.settings.autoSummary;\n        if (summaryLanguage)\n            summaryLanguage.value = this.settings.summaryLanguage;\n        if (saveLocation)\n            saveLocation.value = this.settings.saveLocation;\n    }\n    async populateMediaDevices() {\n        try {\n            const devices = await navigator.mediaDevices.enumerateDevices();\n            const audioSelect = this.elements['audio-source'];\n            if (audioSelect) {\n                // Clear existing options except default\n                audioSelect.innerHTML = '<option value=\"default\">Default Microphone</option>';\n                devices\n                    .filter(device => device.kind === 'audioinput')\n                    .forEach(device => {\n                    const option = document.createElement('option');\n                    option.value = device.deviceId;\n                    option.textContent = device.label || `Microphone ${audioSelect.options.length}`;\n                    audioSelect.appendChild(option);\n                });\n            }\n        }\n        catch (error) {\n            console.error('Failed to enumerate media devices:', error);\n        }\n    }\n    getMediaConstraints() {\n        const audioConstraints = {\n            echoCancellation: true,\n            noiseSuppression: true,\n            autoGainControl: true\n        };\n        if (this.settings.audioSource !== 'default') {\n            audioConstraints.deviceId = this.settings.audioSource;\n        }\n        const constraints = {\n            audio: audioConstraints\n        };\n        if (this.settings.videoSource !== 'audio-only') {\n            const videoConstraints = {\n                width: { ideal: this.getVideoWidth() },\n                height: { ideal: this.getVideoHeight() },\n                frameRate: { ideal: 30 }\n            };\n            if (this.settings.videoSource === 'screen') {\n                constraints.video = {\n                    ...videoConstraints,\n                    displaySurface: 'monitor'\n                };\n            }\n            else {\n                constraints.video = videoConstraints;\n            }\n        }\n        return constraints;\n    }\n    getVideoWidth() {\n        switch (this.settings.quality) {\n            case 'high': return 1920;\n            case 'medium': return 1280;\n            case 'low': return 854;\n            default: return 1920;\n        }\n    }\n    getVideoHeight() {\n        switch (this.settings.quality) {\n            case 'high': return 1080;\n            case 'medium': return 720;\n            case 'low': return 480;\n            default: return 1080;\n        }\n    }\n    async startRecording() {\n        if (this.currentState !== 'idle')\n            return;\n        try {\n            const constraints = this.getMediaConstraints();\n            if (this.settings.videoSource === 'screen') {\n                // @ts-ignore - getDisplayMedia is not in all TypeScript definitions\n                this.stream = await navigator.mediaDevices.getDisplayMedia(constraints);\n            }\n            else {\n                this.stream = await navigator.mediaDevices.getUserMedia(constraints);\n            }\n            this.setupAudioVisualization();\n            this.setupMediaRecorder();\n            this.mediaRecorder?.start();\n            this.currentState = 'recording';\n            this.recordingStartTime = Date.now();\n            this.startTimer();\n            this.updateUI();\n            await window.electronAPI.setRecordingState(true);\n        }\n        catch (error) {\n            console.error('Failed to start recording:', error);\n            await window.electronAPI.showErrorDialog('Recording Error', `Failed to start recording: ${error}`);\n        }\n    }\n    setupMediaRecorder() {\n        if (!this.stream)\n            return;\n        const options = {\n            mimeType: 'video/webm;codecs=vp9,opus'\n        };\n        // Fallback to supported mime types\n        if (!MediaRecorder.isTypeSupported(options.mimeType)) {\n            options.mimeType = 'video/webm';\n        }\n        if (!MediaRecorder.isTypeSupported(options.mimeType)) {\n            options.mimeType = 'video/mp4';\n        }\n        this.mediaRecorder = new MediaRecorder(this.stream, options);\n        this.recordedChunks = [];\n        this.mediaRecorder.ondataavailable = (event) => {\n            if (event.data.size > 0) {\n                this.recordedChunks.push(event.data);\n            }\n        };\n        this.mediaRecorder.onstop = () => {\n            this.processRecording();\n        };\n    }\n    setupAudioVisualization() {\n        if (!this.stream)\n            return;\n        try {\n            this.audioContext = new AudioContext();\n            const source = this.audioContext.createMediaStreamSource(this.stream);\n            this.analyser = this.audioContext.createAnalyser();\n            this.analyser.fftSize = 256;\n            const bufferLength = this.analyser.frequencyBinCount;\n            this.dataArray = new Uint8Array(bufferLength);\n            source.connect(this.analyser);\n            this.drawAudioVisualization();\n        }\n        catch (error) {\n            console.error('Failed to setup audio visualization:', error);\n        }\n    }\n    drawAudioVisualization() {\n        if (!this.analyser || !this.dataArray)\n            return;\n        const canvas = this.elements['audio-canvas'];\n        if (!canvas)\n            return;\n        const ctx = canvas.getContext('2d');\n        if (!ctx)\n            return;\n        const draw = () => {\n            if (this.currentState === 'idle')\n                return;\n            this.animationId = requestAnimationFrame(draw);\n            this.analyser.getByteFrequencyData(this.dataArray);\n            ctx.fillStyle = 'rgba(0, 0, 0, 0.1)';\n            ctx.fillRect(0, 0, canvas.width, canvas.height);\n            const barWidth = (canvas.width / this.dataArray.length) * 2.5;\n            let barHeight;\n            let x = 0;\n            for (let i = 0; i < (this.dataArray?.length || 0); i++) {\n                const dataValue = this.dataArray?.[i] ?? 0;\n                if (canvas && canvas.height && dataValue !== undefined) {\n                    barHeight = (dataValue / 255) * canvas.height * 0.8;\n                }\n                else {\n                    barHeight = 0;\n                }\n                const gradient = (ctx && canvas) ? ctx.createLinearGradient(0, canvas.height - barHeight, 0, canvas.height) : null;\n                if (gradient && ctx) {\n                    gradient.addColorStop(0, '#3b82f6');\n                    gradient.addColorStop(1, '#1d4ed8');\n                    ctx.fillStyle = gradient;\n                }\n                else if (ctx) {\n                    ctx.fillStyle = '#3b82f6';\n                }\n                if (ctx && canvas) {\n                    ctx.fillRect(x, canvas.height - barHeight, barWidth, barHeight);\n                }\n                x += barWidth + 1;\n            }\n        };\n        draw();\n    }\n    togglePause() {\n        if (this.currentState === 'recording') {\n            this.mediaRecorder?.pause();\n            this.currentState = 'paused';\n            this.stopTimer();\n        }\n        else if (this.currentState === 'paused') {\n            this.mediaRecorder?.resume();\n            this.currentState = 'recording';\n            this.startTimer();\n        }\n        this.updateUI();\n    }\n    async stopRecording() {\n        if (this.currentState === 'idle')\n            return;\n        this.mediaRecorder?.stop();\n        this.currentState = 'idle';\n        this.stopTimer();\n        this.stopAudioVisualization();\n        if (this.stream) {\n            this.stream.getTracks().forEach(track => track.stop());\n            this.stream = null;\n        }\n        this.updateUI();\n        await window.electronAPI.setRecordingState(false);\n    }\n    stopAudioVisualization() {\n        if (this.animationId) {\n            cancelAnimationFrame(this.animationId);\n            this.animationId = null;\n        }\n        if (this.audioContext) {\n            this.audioContext.close();\n            this.audioContext = null;\n        }\n    }\n    startTimer() {\n        this.timerInterval = setInterval(() => {\n            const elapsed = Date.now() - this.recordingStartTime;\n            this.updateTimerDisplay(elapsed);\n        }, 1000);\n    }\n    stopTimer() {\n        if (this.timerInterval) {\n            clearInterval(this.timerInterval);\n            this.timerInterval = null;\n        }\n    }\n    updateTimerDisplay(elapsed) {\n        const seconds = Math.floor(elapsed / 1000);\n        const minutes = Math.floor(seconds / 60);\n        const hours = Math.floor(minutes / 60);\n        const timeString = `${hours.toString().padStart(2, '0')}:${(minutes % 60).toString().padStart(2, '0')}:${(seconds % 60).toString().padStart(2, '0')}`;\n        const timerElement = this.elements['recording-timer'];\n        if (timerElement) {\n            timerElement.textContent = timeString;\n        }\n    }\n    updateUI() {\n        const recordBtn = this.elements['record-btn'];\n        const pauseBtn = this.elements['pause-btn'];\n        const stopBtn = this.elements['stop-btn'];\n        const statusText = this.elements['status-text'];\n        const statusDot = document.querySelector('.status-dot');\n        if (recordBtn && pauseBtn && stopBtn && statusText && statusDot) {\n            const state = this.currentState;\n            switch (state) {\n                case 'idle':\n                    recordBtn.disabled = false;\n                    pauseBtn.disabled = true;\n                    stopBtn.disabled = true;\n                    statusText.textContent = 'Ready to Record';\n                    statusDot.className = 'status-dot w-3 h-3 bg-green-500 rounded-full animate-pulse-slow';\n                    recordBtn.innerHTML = `\n                        <svg class=\"w-6 h-6\" viewBox=\"0 0 24 24\" fill=\"currentColor\">\n                            <circle cx=\"12\" cy=\"12\" r=\"8\"/>\n                        </svg>\n                        <span>Start Recording</span>\n                    `;\n                    break;\n                case 'recording':\n                    recordBtn.disabled = true;\n                    pauseBtn.disabled = false;\n                    stopBtn.disabled = false;\n                    statusText.textContent = 'Recording...';\n                    statusDot.className = 'status-dot w-3 h-3 bg-red-500 rounded-full animate-pulse';\n                    pauseBtn.innerHTML = `\n                        <svg class=\"w-6 h-6\" viewBox=\"0 0 24 24\" fill=\"currentColor\">\n                            <rect x=\"8\" y=\"6\" width=\"2\" height=\"12\"/>\n                            <rect x=\"14\" y=\"6\" width=\"2\" height=\"12\"/>\n                        </svg>\n                        <span>Pause</span>\n                    `;\n                    break;\n                case 'paused':\n                    recordBtn.disabled = true;\n                    pauseBtn.disabled = false;\n                    stopBtn.disabled = false;\n                    statusText.textContent = 'Paused';\n                    statusDot.className = 'status-dot w-3 h-3 bg-yellow-500 rounded-full';\n                    pauseBtn.innerHTML = `\n                        <svg class=\"w-6 h-6\" viewBox=\"0 0 24 24\" fill=\"currentColor\">\n                            <polygon points=\"8,6 20,12 8,18\"/>\n                        </svg>\n                        <span>Resume</span>\n                    `;\n                    break;\n            }\n        }\n    }\n    async processRecording() {\n        this.showInterface('processing');\n        const recordingBlob = new Blob(this.recordedChunks, { type: 'video/webm' });\n        const recordingData = {\n            blob: recordingBlob,\n            duration: Date.now() - this.recordingStartTime,\n            timestamp: new Date(),\n            settings: { ...this.settings }\n        };\n        // Simulate processing with progress\n        await this.simulateProcessing();\n        if (this.settings.autoSave) {\n            await this.saveRecording(recordingData);\n        }\n        if (this.settings.autoSummary) {\n            const summary = await this.generateSummary(recordingData);\n            this.displaySummary(summary);\n        }\n        this.showInterface('summary');\n    }\n    async simulateProcessing() {\n        const progressFill = this.elements['progress-fill'];\n        if (!progressFill)\n            return;\n        return new Promise((resolve) => {\n            let progress = 0;\n            const interval = setInterval(() => {\n                progress += Math.random() * 15;\n                if (progress >= 100) {\n                    progress = 100;\n                    clearInterval(interval);\n                    setTimeout(resolve, 500);\n                }\n                progressFill.style.width = `${progress}%`;\n            }, 200);\n        });\n    }\n    async saveRecording(data) {\n        try {\n            const arrayBuffer = await data.blob.arrayBuffer();\n            const buffer = Buffer.from(arrayBuffer);\n            await window.electronAPI.saveRecording(buffer, data.timestamp.toISOString());\n        }\n        catch (error) {\n            console.error('Failed to save recording:', error);\n            await window.electronAPI.showErrorDialog('Save Error', `Failed to save recording: ${error}`);\n        }\n    }\n    async generateSummary(data) {\n        // Mock summary generation - in a real app, this would call an AI service\n        return {\n            keyPoints: [\n                'Meeting started with introductions and agenda review',\n                'Discussed project timeline and key milestones',\n                'Identified potential risks and mitigation strategies',\n                'Assigned action items to team members',\n                'Scheduled follow-up meeting for next week'\n            ],\n            transcript: 'This is a mock transcript of the recording. In a real implementation, this would contain the actual transcribed text from the audio/video content.',\n            speakers: [\n                { id: 'speaker1', name: 'Speaker 1', speakingTime: 120, segments: [] },\n                { id: 'speaker2', name: 'Speaker 2', speakingTime: 95, segments: [] },\n                { id: 'speaker3', name: 'Speaker 3', speakingTime: 85, segments: [] }\n            ],\n            topics: [\n                { name: 'Project Planning', relevance: 0.9, mentions: 5, timeRanges: [{ start: 0, end: 300 }] },\n                { name: 'Risk Management', relevance: 0.8, mentions: 3, timeRanges: [{ start: 300, end: 600 }] },\n                { name: 'Team Coordination', relevance: 0.7, mentions: 4, timeRanges: [{ start: 600, end: 900 }] }\n            ],\n            actionItems: [\n                { task: 'Prepare project proposal', assignee: 'John Doe', dueDate: '2024-01-15', priority: 'high' },\n                { task: 'Review technical requirements', assignee: 'Jane Smith', dueDate: '2024-01-12', priority: 'medium' }\n            ],\n            duration: data.duration,\n            timestamp: data.timestamp\n        };\n    }\n    displaySummary(summary) {\n        const keyPointsElement = this.elements['key-points'];\n        const transcriptElement = this.elements['transcript'];\n        if (keyPointsElement) {\n            keyPointsElement.innerHTML = summary.keyPoints\n                .map(point => `<div class=\"p-3 bg-white/5 rounded-lg border-l-2 border-primary-500\">${point}</div>`)\n                .join('');\n        }\n        if (transcriptElement) {\n            transcriptElement.innerHTML = `<p>${summary.transcript}</p>`;\n        }\n    }\n    showInterface(type) {\n        const interfaces = ['recording-interface', 'processing-interface', 'summary-interface'];\n        interfaces.forEach(interfaceId => {\n            const element = this.elements[interfaceId];\n            if (element) {\n                element.classList.add('hidden');\n            }\n        });\n        const targetInterface = this.elements[`${type}-interface`];\n        if (targetInterface) {\n            targetInterface.classList.remove('hidden');\n        }\n    }\n    newRecording() {\n        this.showInterface('recording');\n        this.resetTimer();\n    }\n    resetTimer() {\n        const timerElement = this.elements['recording-timer'];\n        if (timerElement) {\n            timerElement.textContent = '00:00:00';\n        }\n    }\n    async openFile() {\n        try {\n            const result = await window.electronAPI.showOpenDialog();\n            if (result && !result.canceled && result.filePaths.length > 0) {\n                // Handle opening the selected file\n                console.log('Opening file:', result.filePaths[0]);\n            }\n        }\n        catch (error) {\n            console.error('Failed to open file:', error);\n        }\n    }\n    openSettings() {\n        const modal = this.elements['settings-modal'];\n        if (modal) {\n            modal.classList.remove('hidden');\n        }\n    }\n    closeSettings() {\n        const modal = this.elements['settings-modal'];\n        if (modal) {\n            modal.classList.add('hidden');\n        }\n    }\n    toggleRecording() {\n        if (this.currentState === 'idle') {\n            this.startRecording();\n        }\n        else {\n            this.stopRecording();\n        }\n    }\n    async exportSummary() {\n        try {\n            await window.electronAPI.showInfoDialog('Export', 'Export functionality will be implemented in a future update.');\n        }\n        catch (error) {\n            console.error('Export failed:', error);\n        }\n    }\n    async shareSummary() {\n        try {\n            await window.electronAPI.showInfoDialog('Share', 'Share functionality will be implemented in a future update.');\n        }\n        catch (error) {\n            console.error('Share failed:', error);\n        }\n    }\n}\n// Initialize the application when DOM is loaded\ndocument.addEventListener('DOMContentLoaded', () => {\n    new LumenRecorder();\n});\n// Handle app version display\nwindow.electronAPI.getAppVersion().then(version => {\n    console.log(`Lumen Recorder v${version}`);\n}).catch(error => {\n    console.error('Failed to get app version:', error);\n});\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/renderer/app.ts\n\n}");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The require scope
/******/ 	var __webpack_require__ = {};
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval-source-map devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__["./src/renderer/app.ts"](0, __webpack_exports__, __webpack_require__);
/******/ 	
/******/ })()
;